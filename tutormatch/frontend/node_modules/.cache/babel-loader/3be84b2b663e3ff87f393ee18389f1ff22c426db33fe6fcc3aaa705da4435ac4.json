{"ast":null,"code":"import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction createUseRender(forwardMotionProps = false) {\n  const useRender = (Component, props, ref, {\n    latestValues\n  }, isStatic) => {\n    const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = Component !== Fragment ? {\n      ...filteredProps,\n      ...visualProps,\n      ref\n    } : {};\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    const {\n      children\n    } = props;\n    const renderedChildren = useMemo(() => isMotionValue(children) ? children.get() : children, [children]);\n    return createElement(Component, {\n      ...elementProps,\n      children: renderedChildren\n    });\n  };\n  return useRender;\n}\nexport { createUseRender };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}