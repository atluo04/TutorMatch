{"ast":null,"code":"var _jsxFileName = \"/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/components/post/Post_home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport DOMPurify from 'dompurify';\nimport \"./post_home.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Post_home = ({\n  post,\n  look_for,\n  onAvatarClick\n}) => {\n  _s();\n  const [user_data, setData] = useState(null);\n  const [comments, setComments] = useState([]);\n  const navigate = useNavigate();\n  async function setUserInfo(userId) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info2`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      if (data.success) {\n        //console.log(post.date )\n        setData(data.value);\n      } else {\n        throw new Error(\"Error fetching userInfo.\");\n      }\n    } catch (error) {\n      console.log(\"Error fetching userInfo.\");\n    }\n  }\n  const sanitizeHTML = html => {\n    if (html) {\n      const cleanedHtmlContent = html.replace(/^\"(.*)\"$/, \"$1\");\n      return DOMPurify.sanitize(cleanedHtmlContent);\n    }\n  };\n  async function getComments(selectedPost) {\n    try {\n      //ROUTE STUFF FOR GETTING COMMENTS\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-post-comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          target: selectedPost\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n      if (data.success && data.value) {\n        let userInfo = {};\n        const commentsWithInfo = await Promise.all(data.value.map(async comment => {\n          console.log(comment.from, 'ad');\n          if (!userInfo[comment.from]) {\n            const userResponse = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                user: comment.from\n              })\n            });\n            const userData = await userResponse.json();\n            if (userData.success) {\n              userInfo[comment.from] = userData.value;\n            } else {\n              console.error(\"Error getting information\");\n            }\n          }\n          return {\n            ...comment,\n            userInfo: userInfo[comment.from]\n          };\n        }));\n        setComments(commentsWithInfo);\n      } else {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    console.log(post.userId);\n    if (post.userId && post.objectID) {\n      setUserInfo(post.userId);\n    }\n    getComments(post.objectID);\n  }, [post.userId, post.objectID]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [look_for === 'posts' && user_data && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post_h\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postWrapper_h\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postTop_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"postProfileImg_h\",\n              src: user_data.profile_pic,\n              alt: \"\",\n              onClick: () => onAvatarClick(post.userId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postUsername_h\",\n              onClick: () => onAvatarClick(post.userId),\n              children: user_data.Fullname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postDate_h\",\n              children: format_time_for_post(post.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopRight_h\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postText_h\",\n              style: {\n                cursor: 'pointer'\n              },\n              onClick: () => navigate(`/forum/${post.course}`),\n              children: post.course\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postCenter_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: sanitizeHTML(post.title)\n            },\n            className: \"postTitle_h\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: sanitizeHTML(post.content)\n            },\n            className: \"contentContainer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"postImg_h\",\n            src: post.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postBottom_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postBottomLeft_h\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentsContainer_h\",\n            children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment_h\",\n              children: comment.userInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"commenterInfo_h\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: comment.userInfo.image,\n                  alt: \"Commenter\",\n                  onClick: () => onAvatarClick(comment.from)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  onClick: () => onAvatarClick(comment.from),\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: [comment.userInfo.name, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"commentContent_h\",\n                  children: comment.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 49\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Loading commenter info...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 49\n              }, this)\n            }, comment.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"noComments\",\n              children: \"No comments yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), look_for === 'users' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post_h\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postWrapper_h\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postTop_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"postProfileImg_h\",\n              src: post.profile_pic,\n              alt: \"\",\n              onClick: () => onAvatarClick(post.objectID)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postUsername_h\",\n              onClick: () => onAvatarClick(post.objectID),\n              children: post.Fullname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopRight_h\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postText_h\",\n              children: post.Year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postCenter_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: \"Majors:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postMajorsTags_h\",\n            children: post.Majors ? post.Majors.map((major, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postMajorTag_h\",\n              children: major\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postMajorTag_h\",\n              children: \"No majors listed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: \"Courses:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postMajorsTags_h\",\n            children: post.Courses ? post.Courses.map((course, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postMajorTag_h\",\n              children: course\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postMajorTag_h\",\n              children: \"No Courses listed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: \"Ask me about:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postMajorsTags_h\",\n            children: post.Tags ? post.Tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postMajorTag_h\",\n              children: tag\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"postTag_h\",\n              children: \"No tags available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postTopLeft_h\",\n            children: \"Bio:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"postText_h\",\n            children: post.Bio\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postBottom_h\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postBottomLeft_h\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"postCreateDate_h\",\n            children: [\"Member since: \", format_time_for_post(post.created_date)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Post_home, \"hirxapub+OMXxpO1DadYZmOLKvY=\", false, function () {\n  return [useNavigate];\n});\n_c = Post_home;\nfunction format_time(timestamp, look_for) {\n  const utcDate = new Date(timestamp);\n  const targetDate = new Date(utcDate.getTime() - 8 * 60 * 60 * 1000);\n  const year = targetDate.getUTCFullYear();\n  const month = ('0' + (targetDate.getUTCMonth() + 1)).slice(-2);\n  const day = ('0' + targetDate.getUTCDate()).slice(-2);\n  const hours = ('0' + targetDate.getUTCHours()).slice(-2);\n  const minutes = ('0' + targetDate.getUTCMinutes()).slice(-2);\n  const seconds = ('0' + targetDate.getUTCSeconds()).slice(-2);\n  let formattedDate;\n  if (look_for === \"users\") formattedDate = `${year}-${month}-${day}`;else formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  return formattedDate;\n}\nfunction format_time_for_post(timestamp) {\n  // Create a new Date object from the Unix timestamp (in milliseconds)\n  const date = new Date(timestamp * 1000); // JavaScript uses milliseconds, so multiply by 1000\n\n  // Use toUTCString to convert the date to a UTC string\n  const adjustedDate = new Date(date.getTime() + -8 * 3600 * 1000);\n\n  // Build a custom formatted string\n  const customFormat = adjustedDate.getUTCFullYear() + '-' + ('0' + (adjustedDate.getUTCMonth() + 1)).slice(-2) + '-' +\n  // Months are 0-indexed\n  ('0' + adjustedDate.getUTCDate()).slice(-2) + ' ' + ('0' + adjustedDate.getUTCHours()).slice(-2) + ':' + ('0' + adjustedDate.getUTCMinutes()).slice(-2) + ':' + ('0' + adjustedDate.getUTCSeconds()).slice(-2);\n  return customFormat; // or return utcString for the standard UTC format\n}\nexport default Post_home;\nvar _c;\n$RefreshReg$(_c, \"Post_home\");","map":{"version":3,"names":["React","useState","useEffect","DOMPurify","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Post_home","post","look_for","onAvatarClick","_s","user_data","setData","comments","setComments","navigate","setUserInfo","userId","response","fetch","process","env","REACT_APP_SERVER_URL","method","headers","body","JSON","stringify","user","ok","Error","data","json","success","value","error","console","log","sanitizeHTML","html","cleanedHtmlContent","replace","sanitize","getComments","selectedPost","target","message","userInfo","commentsWithInfo","Promise","all","map","comment","from","userResponse","userData","alert","objectID","children","className","src","profile_pic","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Fullname","format_time_for_post","date","style","cursor","course","dangerouslySetInnerHTML","__html","title","content","image","length","name","id","Year","Majors","major","index","Courses","Tags","tag","Bio","created_date","_c","format_time","timestamp","utcDate","Date","targetDate","getTime","year","getUTCFullYear","month","getUTCMonth","slice","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","formattedDate","adjustedDate","customFormat","$RefreshReg$"],"sources":["/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/components/post/Post_home.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport DOMPurify from 'dompurify';\nimport \"./post_home.css\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst Post_home = ({post, look_for, onAvatarClick}) => {\n    const [user_data, setData] = useState(null);\n    const [comments, setComments] = useState([]);\n    const navigate = useNavigate();\n\n    async function setUserInfo(userId) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info2`, {\n                method: 'POST',\n                headers: {\n                'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ user: userId })\n                },\n            );\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            if (data.success) {\n                //console.log(post.date )\n                setData(data.value)}\n            else {\n                throw new Error(\"Error fetching userInfo.\");\n            }\n        }\n    catch(error) {\n        console.log(\"Error fetching userInfo.\")\n\n        }\n    }\n    \n    \n\n\n    const sanitizeHTML = (html) => {\n        if(html){\n          const cleanedHtmlContent = html.replace(/^\"(.*)\"$/, \"$1\");\n          return DOMPurify.sanitize(cleanedHtmlContent);\n        }\n    };\n\n\n\n    async function getComments(selectedPost){\n        try {\n          //ROUTE STUFF FOR GETTING COMMENTS\n          const response = await fetch(\n            `${process.env.REACT_APP_SERVER_URL}/get-post-comments`,\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                target: selectedPost, \n              }),\n            }\n          );\n      \n          const data = await response.json();\n      \n          if (!response.ok) {\n            throw new Error(data.message || \"Failed to fetch comments.\");\n          }\n      \n          if (data.success && data.value) {\n            let userInfo = {};\n            const commentsWithInfo = await Promise.all(\n              data.value.map(async(comment) => {\n                console.log(comment.from, 'ad')\n                if (!userInfo[comment.from]) {\n                  const userResponse = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n                    method: \"POST\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({ user: comment.from }),\n                  });\n                const userData = await userResponse.json();\n                if (userData.success) {\n                  userInfo[comment.from] = userData.value; \n                } else {\n                  console.error(\"Error getting information\");\n                }\n              }\n              return {\n                ...comment,\n                userInfo: userInfo[comment.from]\n              };\n            }));\n            setComments(commentsWithInfo);\n          } else {\n            throw new Error(data.message || \"Failed to fetch comments.\");\n          }\n    \n        } catch (error) {\n          alert(\"Server error!\");\n          console.log(error);\n        }\n      }\n\n      useEffect(() => {\n        console.log(post.userId)\n        if(post.userId && post.objectID) {\n            setUserInfo(post.userId);}\n            getComments(post.objectID)\n      }, [post.userId, post.objectID]);\n\n    return (\n        <>\n            {look_for === 'posts' && user_data && (\n                <div className=\"post_h\">\n                    <div className=\"postWrapper_h\">\n                        <div className=\"postTop_h\">\n                            <div className=\"postTopLeft_h\">\n                                <img className=\"postProfileImg_h\" src={user_data.profile_pic} alt=\"\" onClick={() => onAvatarClick(post.userId)}/>\n                                <span className=\"postUsername_h\" onClick={() => onAvatarClick(post.userId)}>{user_data.Fullname}</span>\n                                <span className=\"postDate_h\">{format_time_for_post(post.date)}</span>\n                            </div>\n                            <div className=\"postTopRight_h\">\n                                <span className=\"postText_h\" style={{ cursor: 'pointer' }} onClick={() => navigate(`/forum/${post.course}`)}>{post.course}</span>\n                            </div>\n                        </div>\n                        <div className=\"postCenter_h\">\n                        <div dangerouslySetInnerHTML={{__html: sanitizeHTML(post.title)}}\n                                className=\"postTitle_h\"\n                            ></div>\n                            <div dangerouslySetInnerHTML={{__html: sanitizeHTML(post.content)}}\n                                className=\"contentContainer\"\n                            ></div>\n                            <img className=\"postImg_h\" src={post.image} alt=\"\" />\n                        </div>\n                        <div className=\"postBottom_h\">\n                            <div className=\"postBottomLeft_h\">\n                                {/* Any content for postBottomLeft */}\n                            </div>\n                            <div className=\"commentsContainer_h\">\n                                {comments.length > 0 ? (\n                                    comments.map((comment) => (\n                                        <div key={comment.id} className=\"comment_h\">\n                                            {comment.userInfo ? (\n                                                <div className=\"commenterInfo_h\">\n                                                    <img src={comment.userInfo.image} alt=\"Commenter\" onClick={() => onAvatarClick(comment.from)} />\n                                                    <span onClick={() => onAvatarClick(comment.from)} style={{ cursor: 'pointer' }}>\n                                                        {comment.userInfo.name}:\n                                                    </span>\n                                                    <div className=\"commentContent_h\">{comment.content}</div>\n                                                </div>\n                                            ) : (\n                                                <span>Loading commenter info...</span>\n                                            )}\n                                        </div>\n                                    ))\n                                ) : (\n                                    <div className=\"noComments\">No comments yet.</div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {look_for === 'users' && (\n                <div className=\"post_h\">\n                <div className=\"postWrapper_h\">\n                    <div className=\"postTop_h\">\n                        <div className=\"postTopLeft_h\">\n                            <img className=\"postProfileImg_h\" src={post.profile_pic} alt=\"\"  onClick={() => onAvatarClick(post.objectID)}/>\n                            <span className=\"postUsername_h\"  onClick={() => onAvatarClick(post.objectID)}>{post.Fullname}</span>\n                            {/* <span className=\"postDate\">{format_time(post.Birthday, look_for)}</span> */}\n                        </div>\n                        <div className=\"postTopRight_h\">\n                            <span className=\"postText_h\">{post.Year}</span>\n                        </div>\n                    </div>\n                    <div className=\"postCenter_h\">\n                        <div className=\"postTopLeft_h\">Majors:</div>\n                            <div className=\"postMajorsTags_h\">\n                                {post.Majors ? (\n                                    post.Majors.map((major, index) => (\n                                        <span key={index} className=\"postMajorTag_h\">{major}</span>\n                                    ))\n                                ) : (\n                                    <span className=\"postMajorTag_h\">No majors listed</span>\n                                )}\n                            </div>\n                        <div className=\"postTopLeft_h\">Courses:</div>\n                            <div className=\"postMajorsTags_h\">\n                                {post.Courses ? (\n                                    post.Courses.map((course, index) => (\n                                        <span key={index} className=\"postMajorTag_h\">{course}</span>\n                                    ))\n                                ) : (\n                                    <span className=\"postMajorTag_h\">No Courses listed</span>\n                                )}\n                            </div>\n                        <div className=\"postTopLeft_h\">Ask me about:</div>\n                            <div className=\"postMajorsTags_h\">\n                            {post.Tags ? (\n                                post.Tags.map((tag, index) => (\n                                <   span key={index} className=\"postMajorTag_h\">{tag}</span>\n                                ))\n                            ) : (\n                                <span className=\"postTag_h\">No tags available</span>\n                            )}\n                            </div>\n                        <div className=\"postTopLeft_h\">Bio:</div>\n                            <span className=\"postText_h\">{post.Bio}</span>\n                    </div>\n                    <div className=\"postBottom_h\">\n                        <div className=\"postBottomLeft_h\"></div>\n                            <span className=\"postCreateDate_h\">Member since: {format_time_for_post(post.created_date)}</span>\n                    </div>\n                </div>\n            </div>\n            )}\n        </>\n    );\n};\n\nfunction format_time(timestamp, look_for) {\n\n    const utcDate = new Date(timestamp);\n\n    const targetDate = new Date(utcDate.getTime() - (8 * 60 * 60 * 1000));\n\n    const year = targetDate.getUTCFullYear();\n    const month = ('0' + (targetDate.getUTCMonth() + 1)).slice(-2);\n    const day = ('0' + targetDate.getUTCDate()).slice(-2);\n    const hours = ('0' + targetDate.getUTCHours()).slice(-2);\n    const minutes = ('0' + targetDate.getUTCMinutes()).slice(-2);\n    const seconds = ('0' + targetDate.getUTCSeconds()).slice(-2);\n\n    let formattedDate;\n    if (look_for === \"users\")\n        formattedDate = `${year}-${month}-${day}`;\n    else\n    formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n    return formattedDate;\n}\n\nfunction format_time_for_post(timestamp) {\n    // Create a new Date object from the Unix timestamp (in milliseconds)\n    const date = new Date(timestamp * 1000); // JavaScript uses milliseconds, so multiply by 1000\n\n    // Use toUTCString to convert the date to a UTC string\n    const adjustedDate = new Date(date.getTime() + -8 * 3600 * 1000);\n\n    // Build a custom formatted string\n    const customFormat = adjustedDate.getUTCFullYear() + '-' +\n        ('0' + (adjustedDate.getUTCMonth() + 1)).slice(-2) + '-' + // Months are 0-indexed\n        ('0' + adjustedDate.getUTCDate()).slice(-2) + ' ' +\n        ('0' + adjustedDate.getUTCHours()).slice(-2) + ':' +\n        ('0' + adjustedDate.getUTCMinutes()).slice(-2) + ':' +\n        ('0' + adjustedDate.getUTCSeconds()).slice(-2) ;\n\n    return customFormat; // or return utcString for the standard UTC format\n}\n\n\nexport default Post_home"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}