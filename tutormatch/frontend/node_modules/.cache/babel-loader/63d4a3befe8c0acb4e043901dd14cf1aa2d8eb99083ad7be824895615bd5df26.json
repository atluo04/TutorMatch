{"ast":null,"code":"var _jsxFileName = \"/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/pages/ChatBody.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser } from '../userContext';\nimport \"../html/chatBody.css\";\nimport ChatList from \"../components/chat/chatComponents/ChatList.js\";\nimport ChatContent from \"../components/chat/chatComponents/ChatContent.js\";\nimport UserProfile from \"../components/chat/chatComponents/UserProfile.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBody() {\n  _s();\n  var _location$state;\n  //const user = auth.currentUser;\n  const location = useLocation();\n  const [conversations, setConversations] = useState([]);\n  const [currentConversationId, setConversationId] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n  const {\n    uid,\n    setUid\n  } = useUser();\n  const navigate = useNavigate();\n  const selectConversation = conversationId => {\n    setConversationId(conversationId);\n  };\n  async function fetchConversations(userId, conversationId) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-conversations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: userId,\n          conversationId: conversationId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      const convs = result.value;\n      if (!Array.isArray(result.value)) {\n        throw new Error('Expected an array');\n      }\n      const conversationsWithDetails = await Promise.all(convs.map(async conversation => {\n        const otherParticipantUid = conversation.participants.find(uid => uid !== userId);\n        const result2 = await getUserInfo(otherParticipantUid);\n        const otherParticipantInfo = result2.value;\n        const hasNewMessages = conversation.hasNewMessages;\n        console.log(hasNewMessages, 'ababababababa');\n        return {\n          image: otherParticipantInfo.image,\n          id: conversation.id,\n          name: otherParticipantInfo.name,\n          active: false,\n          isOnline: otherParticipantInfo.isOnline,\n          conversationId: conversation.id,\n          unread: hasNewMessages\n        };\n      }));\n      setConversations(conversationsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error.message);\n    }\n  }\n  async function updateLastOpen(conversationId, userId) {\n    const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/update-last-open`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        conversationId: conversationId,\n        userId: userId\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n  }\n  async function findUserByEmail(email) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/find-user-by-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      console.log(result);\n      if (result.success) {\n        console.log(\"User found:\", result.value);\n        return result.value;\n      } else {\n        console.log(\"User not found:\", result.message);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error finding user:\", error);\n      return null;\n    }\n  }\n  async function handleCreateChat(userId, targetId) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/create-new-chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          targetId\n        })\n      });\n      const result = await response.json();\n      if (response.ok && result.value) {\n        console.log(\"New chat created or existing chat found:\", result.value);\n        return result.value;\n      } else {\n        console.error(\"Failed to create new chat:\", result.message);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error in creating new chat:\", error);\n      return null;\n    }\n  }\n  async function getUserInfo(userId) {\n    const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: userId\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  }\n  useEffect(() => {\n    if (!uid) {\n      alert('Please log in first');\n      navigate(\"/\");\n    }\n    const handleOutsideChat = async () => {\n      await fetchConversations(uid);\n      if (location.state && location.state.activeId) {\n        setConversationId(location.state.activeId);\n        updateLastOpen(location.state.activeId, uid);\n      }\n    };\n    handleOutsideChat();\n    const intervalId = setInterval(() => fetchConversations(uid), 6000);\n    return () => clearInterval(intervalId);\n  }, [uid, (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.activeId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main__chatbody\",\n    children: [/*#__PURE__*/_jsxDEV(ChatList, {\n      conversations: conversations,\n      selectConversation: selectConversation,\n      createChat: handleCreateChat,\n      getTargetUser: findUserByEmail,\n      updateLastOpen: updateLastOpen,\n      userId: uid,\n      chatId: currentConversationId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatContent, {\n      conversationId: currentConversationId,\n      conversations: conversations,\n      userInfo: userInfo,\n      userId: uid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UserProfile, {\n      getUserInfo: getUserInfo,\n      user: uid,\n      setInfo: setUserInfo,\n      userId: uid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 7\n  }, this);\n}\n_s(ChatBody, \"453MMEDM1U/y0wwOcCPrWo0v1s0=\", false, function () {\n  return [useLocation, useUser, useNavigate];\n});\n_c = ChatBody;\nvar _c;\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","useUser","ChatList","ChatContent","UserProfile","jsxDEV","_jsxDEV","ChatBody","_s","_location$state","location","conversations","setConversations","currentConversationId","setConversationId","userInfo","setUserInfo","uid","setUid","navigate","selectConversation","conversationId","fetchConversations","userId","response","fetch","process","env","REACT_APP_SERVER_URL","method","headers","body","JSON","stringify","user","ok","Error","result","json","convs","value","Array","isArray","conversationsWithDetails","Promise","all","map","conversation","otherParticipantUid","participants","find","result2","getUserInfo","otherParticipantInfo","hasNewMessages","console","log","image","id","name","active","isOnline","unread","error","message","updateLastOpen","findUserByEmail","email","success","handleCreateChat","targetId","data","alert","handleOutsideChat","state","activeId","intervalId","setInterval","clearInterval","className","children","createChat","getTargetUser","chatId","fileName","_jsxFileName","lineNumber","columnNumber","setInfo","_c","$RefreshReg$"],"sources":["/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/pages/ChatBody.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser } from '../userContext';\nimport \"../html/chatBody.css\";\nimport ChatList from \"../components/chat/chatComponents/ChatList.js\"\nimport ChatContent from \"../components/chat/chatComponents/ChatContent.js\";\nimport UserProfile from \"../components/chat/chatComponents/UserProfile.js\"\n\n\n\nexport default function ChatBody() {\n  //const user = auth.currentUser;\n  const location = useLocation();\n  const [conversations, setConversations] = useState([]);\n  const [currentConversationId, setConversationId] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n  const { uid, setUid } = useUser();\n  const navigate = useNavigate();\n\n  const selectConversation = (conversationId) => {\n    setConversationId(conversationId);\n  };\n\n  async function fetchConversations(userId, conversationId) {\n    try { \n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-conversations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({user: userId, conversationId: conversationId}),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      const convs = result.value;\n      if (!Array.isArray(result.value)) {\n        throw new Error('Expected an array');\n      }\n      const conversationsWithDetails = await Promise.all(convs.map(async (conversation) => {\n        const otherParticipantUid = conversation.participants.find(uid => uid !== userId);\n        const result2 = await getUserInfo(otherParticipantUid);\n        const otherParticipantInfo = result2.value;\n        const hasNewMessages = conversation.hasNewMessages;\n        console.log(hasNewMessages, 'ababababababa')\n        return {\n          image: otherParticipantInfo.image,\n          id: conversation.id,\n          name: otherParticipantInfo.name,\n          active: false,\n          isOnline: otherParticipantInfo.isOnline,\n          conversationId: conversation.id,\n          unread: hasNewMessages,\n        };\n      }));\n      setConversations(conversationsWithDetails);\n      \n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error.message);\n    }\n  }\n  \n  async function updateLastOpen(conversationId, userId) {\n    const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/update-last-open`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ conversationId: conversationId, userId: userId }),\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n  }\n\n  async function findUserByEmail(email) {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/find-user-by-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email: email }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      const result = await response.json();\n      console.log(result);\n  \n      if (result.success) {\n        console.log(\"User found:\", result.value);\n        return result.value;\n      } else {\n        console.log(\"User not found:\", result.message);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error finding user:\", error);\n      return null;\n    }\n  }\n\n  async function handleCreateChat(userId, targetId){\n    try {\n        const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/create-new-chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ userId, targetId }),\n        });\n    \n        const result = await response.json();\n    \n        if (response.ok && result.value) {\n          console.log(\"New chat created or existing chat found:\", result.value);\n          return result.value; \n        } else {\n          console.error(\"Failed to create new chat:\", result.message);\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Error in creating new chat:\", error);\n        return null; \n      }\n  }\n\n  async function getUserInfo(userId) {\n    const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n          body: JSON.stringify({ user: userId })\n        },\n    );\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n    return data;\n  }\n  useEffect(() => {\n    if (!uid) {\n      alert('Please log in first');\n      navigate(\"/\");\n  }\n    const handleOutsideChat = async () => {\n        await fetchConversations(uid);\n        if (location.state && location.state.activeId) {\n          setConversationId(location.state.activeId);\n          updateLastOpen(location.state.activeId, uid);\n        }\n      };\n      handleOutsideChat();\n    const intervalId = setInterval(() => fetchConversations(uid), 6000);\n    return () => clearInterval(intervalId);\n  }, [uid, location.state?.activeId]);\n \n  \n    return (\n      <div className=\"main__chatbody\">\n        <ChatList\n          conversations={conversations}\n          selectConversation={selectConversation}\n          createChat={handleCreateChat}\n          getTargetUser={findUserByEmail}\n          updateLastOpen={updateLastOpen}\n          userId={uid}\n          chatId={currentConversationId}/>\n        <ChatContent\n          conversationId={currentConversationId}\n          conversations={conversations}\n          userInfo={userInfo}\n          userId={uid}/>\n        <UserProfile\n          getUserInfo = {getUserInfo}\n          user={uid}\n          setInfo={setUserInfo}\n          userId={uid}/> \n      </div>\n    );\n  }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,OAAO,QAAQ,gBAAgB;AACxC,OAAO,sBAAsB;AAC7B,OAAOC,QAAQ,MAAM,+CAA+C;AACpE,OAAOC,WAAW,MAAM,kDAAkD;AAC1E,OAAOC,WAAW,MAAM,kDAAkD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAI1E,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACjC;EACA,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,qBAAqB,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACjE,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEmB,GAAG;IAAEC;EAAO,CAAC,GAAGjB,OAAO,CAAC,CAAC;EACjC,MAAMkB,QAAQ,GAAGnB,WAAW,CAAC,CAAC;EAE9B,MAAMoB,kBAAkB,GAAIC,cAAc,IAAK;IAC7CP,iBAAiB,CAACO,cAAc,CAAC;EACnC,CAAC;EAED,eAAeC,kBAAkBA,CAACC,MAAM,EAAEF,cAAc,EAAE;IACxD,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,oBAAmB,EAAE;QACpFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACC,IAAI,EAAEX,MAAM;UAAEF,cAAc,EAAEA;QAAc,CAAC;MACrE,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,MAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACpC,MAAMC,KAAK,GAAGF,MAAM,CAACG,KAAK;MAC1B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,MAAM,CAACG,KAAK,CAAC,EAAE;QAChC,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;MACtC;MACA,MAAMO,wBAAwB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,KAAK,CAACO,GAAG,CAAC,MAAOC,YAAY,IAAK;QACnF,MAAMC,mBAAmB,GAAGD,YAAY,CAACE,YAAY,CAACC,IAAI,CAACjC,GAAG,IAAIA,GAAG,KAAKM,MAAM,CAAC;QACjF,MAAM4B,OAAO,GAAG,MAAMC,WAAW,CAACJ,mBAAmB,CAAC;QACtD,MAAMK,oBAAoB,GAAGF,OAAO,CAACX,KAAK;QAC1C,MAAMc,cAAc,GAAGP,YAAY,CAACO,cAAc;QAClDC,OAAO,CAACC,GAAG,CAACF,cAAc,EAAE,eAAe,CAAC;QAC5C,OAAO;UACLG,KAAK,EAAEJ,oBAAoB,CAACI,KAAK;UACjCC,EAAE,EAAEX,YAAY,CAACW,EAAE;UACnBC,IAAI,EAAEN,oBAAoB,CAACM,IAAI;UAC/BC,MAAM,EAAE,KAAK;UACbC,QAAQ,EAAER,oBAAoB,CAACQ,QAAQ;UACvCxC,cAAc,EAAE0B,YAAY,CAACW,EAAE;UAC/BI,MAAM,EAAER;QACV,CAAC;MACH,CAAC,CAAC,CAAC;MACH1C,gBAAgB,CAAC+B,wBAAwB,CAAC;IAE5C,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC/D;EACF;EAEA,eAAeC,cAAcA,CAAC5C,cAAc,EAAEE,MAAM,EAAE;IACpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,mBAAkB,EAAE;MACnFC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEZ,cAAc,EAAEA,cAAc;QAAEE,MAAM,EAAEA;MAAO,CAAC;IACzE,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACW,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF;EAEA,eAAe8B,eAAeA,CAACC,KAAK,EAAE;IACpC,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,qBAAoB,EAAE;QACrFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEkC,KAAK,EAAEA;QAAM,CAAC;MACvC,CAAC,CAAC;MAEF,IAAI,CAAC3C,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACpCiB,OAAO,CAACC,GAAG,CAACnB,MAAM,CAAC;MAEnB,IAAIA,MAAM,CAAC+B,OAAO,EAAE;QAClBb,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEnB,MAAM,CAACG,KAAK,CAAC;QACxC,OAAOH,MAAM,CAACG,KAAK;MACrB,CAAC,MAAM;QACLe,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEnB,MAAM,CAAC2B,OAAO,CAAC;QAC9C,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO,IAAI;IACb;EACF;EAEA,eAAeM,gBAAgBA,CAAC9C,MAAM,EAAE+C,QAAQ,EAAC;IAC/C,IAAI;MACA,MAAM9C,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,kBAAiB,EAAE;QAClFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEV,MAAM;UAAE+C;QAAS,CAAC;MAC3C,CAAC,CAAC;MAEF,MAAMjC,MAAM,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAEpC,IAAId,QAAQ,CAACW,EAAE,IAAIE,MAAM,CAACG,KAAK,EAAE;QAC/Be,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEnB,MAAM,CAACG,KAAK,CAAC;QACrE,OAAOH,MAAM,CAACG,KAAK;MACrB,CAAC,MAAM;QACLe,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAE1B,MAAM,CAAC2B,OAAO,CAAC;QAC3D,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,IAAI;IACb;EACJ;EAEA,eAAeX,WAAWA,CAAC7B,MAAM,EAAE;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,oBAAqB,gBAAe,EAAE;MAC9EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACCC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEX;MAAO,CAAC;IACvC,CACJ,CAAC;IACD,IAAI,CAACC,QAAQ,CAACW,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMmC,IAAI,GAAG,MAAM/C,QAAQ,CAACc,IAAI,CAAC,CAAC;IACpC,OAAOiC,IAAI;EACb;EACA1E,SAAS,CAAC,MAAM;IACd,IAAI,CAACoB,GAAG,EAAE;MACRuD,KAAK,CAAC,qBAAqB,CAAC;MAC5BrD,QAAQ,CAAC,GAAG,CAAC;IACjB;IACE,MAAMsD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMnD,kBAAkB,CAACL,GAAG,CAAC;MAC7B,IAAIP,QAAQ,CAACgE,KAAK,IAAIhE,QAAQ,CAACgE,KAAK,CAACC,QAAQ,EAAE;QAC7C7D,iBAAiB,CAACJ,QAAQ,CAACgE,KAAK,CAACC,QAAQ,CAAC;QAC1CV,cAAc,CAACvD,QAAQ,CAACgE,KAAK,CAACC,QAAQ,EAAE1D,GAAG,CAAC;MAC9C;IACF,CAAC;IACDwD,iBAAiB,CAAC,CAAC;IACrB,MAAMG,UAAU,GAAGC,WAAW,CAAC,MAAMvD,kBAAkB,CAACL,GAAG,CAAC,EAAE,IAAI,CAAC;IACnE,OAAO,MAAM6D,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAAC3D,GAAG,GAAAR,eAAA,GAAEC,QAAQ,CAACgE,KAAK,cAAAjE,eAAA,uBAAdA,eAAA,CAAgBkE,QAAQ,CAAC,CAAC;EAGjC,oBACErE,OAAA;IAAKyE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1E,OAAA,CAACJ,QAAQ;MACPS,aAAa,EAAEA,aAAc;MAC7BS,kBAAkB,EAAEA,kBAAmB;MACvC6D,UAAU,EAAEZ,gBAAiB;MAC7Ba,aAAa,EAAEhB,eAAgB;MAC/BD,cAAc,EAAEA,cAAe;MAC/B1C,MAAM,EAAEN,GAAI;MACZkE,MAAM,EAAEtE;IAAsB;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAClCjF,OAAA,CAACH,WAAW;MACVkB,cAAc,EAAER,qBAAsB;MACtCF,aAAa,EAAEA,aAAc;MAC7BI,QAAQ,EAAEA,QAAS;MACnBQ,MAAM,EAAEN;IAAI;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChBjF,OAAA,CAACF,WAAW;MACVgD,WAAW,EAAIA,WAAY;MAC3BlB,IAAI,EAAEjB,GAAI;MACVuE,OAAO,EAAExE,WAAY;MACrBO,MAAM,EAAEN;IAAI;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAAC/E,EAAA,CAjLqBD,QAAQ;EAAA,QAEbR,WAAW,EAIJE,OAAO,EACdD,WAAW;AAAA;AAAAyF,EAAA,GAPNlF,QAAQ;AAAA,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}