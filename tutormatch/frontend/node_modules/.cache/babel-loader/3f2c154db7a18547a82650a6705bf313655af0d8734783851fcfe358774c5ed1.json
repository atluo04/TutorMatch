{"ast":null,"code":"var _jsxFileName = \"/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/components/post/Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./post.css\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport { useForum } from \"../forumComponents/forumContext\";\nimport DOMPurify from 'dompurify';\nimport { useUser } from \"../../userContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const {\n    selectedPost\n  } = useForum();\n  const [post, setPost] = useState([]);\n  const [poster, setPoster] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const {\n    uid,\n    setUid\n  } = useUser();\n  const [comments, setComments] = useState([]);\n  const [userInfos, setUserInfos] = useState({});\n  const getPost = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-post-by-id`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          postId: selectedPost\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setPost(data.value);\n        await getUser(data.value.poster);\n      } else {\n        throw new Error(\"Error getting post information.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  };\n  const getUser = async userId => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user: userId\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setPoster(data.value.name);\n      } else {\n        throw new Error(\"Error getting poster user information.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getPost();\n    getComments();\n  }, [selectedPost]);\n  const sanitizeHTML = html => {\n    if (html) {\n      const cleanedHtmlContent = html.replace(/^\"(.*)\"$/, \"$1\");\n      return DOMPurify.sanitize(cleanedHtmlContent);\n    }\n  };\n  const processImageUrl = url => {\n    if (url) {\n      return url.replace(/^\"(.*)\"$/, \"$1\");\n    }\n  };\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    if (selectedPost && comment.trim() !== \"\" && uid) {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/add-post-comment`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            target: selectedPost,\n            fromUser: uid,\n            commentContent: comment\n          })\n        });\n        const data = await response.json();\n        if (data.success) {\n          setComment(\"\");\n          getComments();\n        } else {\n          throw new Error(data.message);\n        }\n      } catch (error) {\n        alert(\"Server error!\");\n        console.log(error);\n      }\n    } else {\n      alert(\"Please enter a comment.\");\n    }\n  };\n  const getComments = async () => {\n    try {\n      //ROUTE STUFF FOR GETTING COMMENTS\n      const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-post-comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          target: selectedPost\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n      if (data.success && data.value) {\n        let userInfo = {};\n        const commentsWithInfo = await Promise.all(data.value.map(async comment => {\n          console.log(comment.from, 'ad');\n          if (!userInfo[comment.from]) {\n            const userResponse = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                user: comment.from\n              })\n            });\n            const userData = await userResponse.json();\n            if (userData.success) {\n              userInfo[comment.from] = userData.value;\n            } else {\n              console.error(\"Error getting information\");\n            }\n          }\n          return {\n            ...comment,\n            userInfo: userInfo[comment.from]\n          };\n        }));\n        setComments(commentsWithInfo);\n      } else {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postInformation\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posterInformation\",\n          children: [\"By: \", poster, \" at \", post.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: sanitizeHTML(post.content)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), post.image && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postImage\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: processImageUrl(post.image),\n            alt: \"Post Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Add a new comment\",\n          className: \"commentInput\",\n          onChange: e => {\n            setComment(e.target.value);\n          },\n          value: comment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"commentSubmitButton\",\n          onClick: handleCommentSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentsContainer\",\n        children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: comment.userInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commenterInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: comment.userInfo.image,\n              alt: \"Commenter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, this), \"By: \", comment.userInfo.name, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"commentContent\",\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Loading commenter info...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 19\n          }, this)\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"noComments\",\n          children: \"No comments yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"afhoIMAOugpwswLbNxhdrkbwmzQ=\", false, function () {\n  return [useForum, useUser];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useEffect","useState","MoreVertIcon","useForum","DOMPurify","useUser","jsxDEV","_jsxDEV","Post","_s","selectedPost","post","setPost","poster","setPoster","comment","setComment","uid","setUid","comments","setComments","userInfos","setUserInfos","getPost","response","fetch","process","env","REACT_APP_SERVER_URL","method","headers","body","JSON","stringify","postId","data","json","success","value","getUser","Error","error","alert","console","log","userId","user","name","getComments","sanitizeHTML","html","cleanedHtmlContent","replace","sanitize","processImageUrl","url","handleCommentSubmit","e","preventDefault","trim","target","fromUser","commentContent","message","ok","userInfo","commentsWithInfo","Promise","all","map","from","userResponse","userData","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","date","dangerouslySetInnerHTML","__html","content","image","src","alt","placeholder","onChange","onClick","length","id","_c","$RefreshReg$"],"sources":["/Users/jiwoo/Desktop/CS_35L/project-6/TutorMatch/tutormatch/frontend/src/components/post/Post.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./post.css\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport { useForum } from \"../forumComponents/forumContext\";\nimport DOMPurify from 'dompurify';\nimport { useUser } from \"../../userContext\";\n\n\nconst Post = () => {\n  const { selectedPost } = useForum();\n  const [post, setPost] = useState([]);\n  const [poster, setPoster] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const { uid, setUid } = useUser();\n  const [comments, setComments] = useState([]);\n  const [userInfos, setUserInfos] = useState({});\n\n  const getPost = async () => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_SERVER_URL}/get-post-by-id`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            postId: selectedPost,\n          }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        setPost(data.value);\n        await getUser(data.value.poster);\n      } else {\n        throw new Error(\"Error getting post information.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  };\n\n  const getUser = async (userId) => {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_SERVER_URL}/get-user-info`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            user: userId,\n          }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        setPoster(data.value.name);\n      } else {\n        throw new Error(\"Error getting poster user information.\");\n      }\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getPost();\n    getComments();\n  }, [selectedPost]);\n\n  const sanitizeHTML = (html) => {\n    if(html){\n      const cleanedHtmlContent = html.replace(/^\"(.*)\"$/, \"$1\");\n      return DOMPurify.sanitize(cleanedHtmlContent);\n    }\n  };\n\n  const processImageUrl = (url) => {\n    if(url){\n      return url.replace(/^\"(.*)\"$/, \"$1\");\n    }\n  }\n\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault(); \n    if (selectedPost && comment.trim() !== \"\"&&uid) {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/add-post-comment`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    target: selectedPost,\n                    fromUser: uid,\n                    commentContent: comment, \n                }),\n            });\n            const data = await response.json();\n            if (data.success) {\n                setComment(\"\"); \n                getComments();\n            } else {\n                throw new Error(data.message);\n            }\n        } catch (error) {\n            alert(\"Server error!\");\n            console.log(error);\n        }\n    } else {\n        alert(\"Please enter a comment.\");\n    }\n};\n\n  const getComments = async() =>{\n    try {\n      //ROUTE STUFF FOR GETTING COMMENTS\n      const response = await fetch(\n        `${process.env.REACT_APP_SERVER_URL}/get-post-comments`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            target: selectedPost, \n          }),\n        }\n      );\n  \n      const data = await response.json();\n  \n      if (!response.ok) {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n  \n      if (data.success && data.value) {\n        let userInfo = {};\n        const commentsWithInfo = await Promise.all(\n          data.value.map(async(comment) => {\n            console.log(comment.from, 'ad')\n            if (!userInfo[comment.from]) {\n              const userResponse = await fetch(`${process.env.REACT_APP_SERVER_URL}/get-user-info`, {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ user: comment.from }),\n              });\n            const userData = await userResponse.json();\n            if (userData.success) {\n              userInfo[comment.from] = userData.value; \n            } else {\n              console.error(\"Error getting information\");\n            }\n          }\n          return {\n            ...comment,\n            userInfo: userInfo[comment.from]\n          };\n        }));\n        setComments(commentsWithInfo);\n      } else {\n        throw new Error(data.message || \"Failed to fetch comments.\");\n      }\n\n    } catch (error) {\n      alert(\"Server error!\");\n      console.log(error);\n    }\n  }\n\n\n  return (\n    <div className=\"post\">\n      <div className=\"postWrapper\">\n        <div className=\"postInformation\">\n          <h2>{post.title}</h2>\n          <div className=\"posterInformation\">\n            By: {poster} at {post.date}\n          </div>\n        </div>\n        <div className=\"postContent\">\n          <div\n            dangerouslySetInnerHTML={{ __html: sanitizeHTML(post.content) }}\n          />\n          {post.image && (\n            <div className=\"postImage\">\n              <img src={processImageUrl(post.image)} alt={\"Post Image\"} />\n            </div>\n          )}\n        </div>\n        <div className=\"commentWrapper\">\n          <h4>Comments</h4>\n          <textarea\n            placeholder=\"Add a new comment\"\n            className=\"commentInput\"\n            onChange={(e) => {\n              setComment(e.target.value);\n            }}\n            value={comment}\n          ></textarea>\n          <div className=\"commentSubmitButton\" onClick={handleCommentSubmit}>\n            Submit\n          </div>\n        </div>\n        <div className=\"commentsContainer\">\n          {comments.length > 0 ? (\n            comments.map((comment) => (\n              <div key={comment.id} className=\"comment\">\n                {comment.userInfo ? (\n                  <div className=\"commenterInfo\">\n                    <img src={comment.userInfo.image} alt=\"Commenter\" />\n                    By: {comment.userInfo.name}\n                    <div className=\"commentContent\">{comment.content}</div>\n                  </div>\n                ) : (\n                  <span>Loading commenter info...</span>\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"noComments\">No comments yet.</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}